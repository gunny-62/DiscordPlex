name: Build and Release

on:
  push:
    tags:
      - '*'

jobs:
  build:
    name: Build ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: windows-latest
            vcpkg_triplet: x64-windows-static
            cmake_preset: ""
            artifact_name: "PresenceForPlex-Windows-x64.exe"
            
          - os: macos-latest
            vcpkg_triplet: arm64-osx
            cmake_preset: ""
            artifact_name: "PresenceForPlex-macOS-arm64.dmg"

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: version
      shell: bash
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION: $VERSION"
        echo "$VERSION" > version.txt

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11

    - name: Configure CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cmake -S . -B build -G "Visual Studio 17 2022" -DCMAKE_TOOLCHAIN_FILE="$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }}

    - name: Configure CMake (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cmake -S . -B build -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=${{ matrix.vcpkg_triplet }} -DCMAKE_BUILD_TYPE=Release

    - name: Build
      run: cmake --build build --config Release

    - name: Package (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        cd build
        cpack -C Release
        mkdir ..\artifacts
        for /f %%i in ('dir /b PresenceForPlex-*-win64.exe') do copy "%%i" "..\artifacts\${{ matrix.artifact_name }}"

    - name: Package (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd build
        cpack -C Release
        mkdir -p ../artifacts
        cp PresenceForPlex-*-Darwin.dmg ../artifacts/${{ matrix.artifact_name }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.os }}-build
        path: artifacts/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-latest-build
        path: ./windows-artifacts

    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: macos-latest-build
        path: ./macos-artifacts

    - name: Generate changelog
      run: |
        python3 generate_changelog.py

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body_path: release_notes/changelog_${{ steps.version.outputs.version }}.md
        files: |
          windows-artifacts/PresenceForPlex-Windows-x64.exe
          macos-artifacts/PresenceForPlex-macOS-arm64.dmg
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}